import React, { useState, useEffect } from 'react';

const App = () => {
  const [isAdminMode, setIsAdminMode] = useState(false);
  const [password, setPassword] = useState('');
  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());
  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());
  const [searchTerm, setSearchTerm] = useState('');
  const [employees, setEmployees] = useState([
    { id: 1, firstName: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢', lastName: '‡πÉ‡∏à‡∏î‡∏µ', code: 'G4S001', days: Array(31).fill(''), earnings: {}, expenses: {} },
    { id: 2, firstName: '‡∏™‡∏∏‡∏Ç‡∏∏‡∏°', lastName: '‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô', code: 'G4S002', days: Array(31).fill(''), earnings: {}, expenses: {} },
    { id: 3, firstName: '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', lastName: '‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á', code: 'G4S003', days: Array(31).fill(''), earnings: {}, expenses: {} }
  ]);
  const [showSummary, setShowSummary] = useState(false);
  const [selectedEmployee, setSelectedEmployee] = useState(null);

  // Generate date range (16th of current month to 15th of next month)
  const generateDateRange = () => {
    const dates = [];
    const startDate = new Date(currentYear, currentMonth, 16);
    
    // Add 16th to end of month
    let currentDate = new Date(startDate);
    while (currentDate.getMonth() === currentMonth) {
      dates.push(currentDate.getDate());
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    // Add 1st to 15th of next month
    currentDate = new Date(currentYear, currentMonth + 1, 1);
    for (let i = 1; i <= 15; i++) {
      dates.push(currentDate.getDate());
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    return dates;
  };

  const dateRange = generateDateRange();

  // Handle admin login
  const handleAdminLogin = () => {
    if (password === 'admin') {
      setIsAdminMode(true);
      setPassword('');
    } else {
      alert('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
  };

  // Toggle attendance status
  const toggleAttendance = (employeeId, dayIndex) => {
    if (!isAdminMode) return;
    
    setEmployees(prev => prev.map(emp => {
      if (emp.id === employeeId) {
        const newDays = [...emp.days];
        if (newDays[dayIndex] === 'N') {
          newDays[dayIndex] = 'F';
        } else if (newDays[dayIndex] === 'F') {
          newDays[dayIndex] = '';
        } else {
          newDays[dayIndex] = 'N';
        }
        return { ...emp, days: newDays };
      }
      return emp;
    }));
  };

  // Add employee
  const addEmployee = () => {
    if (!isAdminMode) return;
    
    const newId = Math.max(...employees.map(e => e.id), 0) + 1;
    const newCode = `G4S${newId.toString().padStart(3, '0')}`;
    setEmployees(prev => [...prev, {
      id: newId,
      firstName: '',
      lastName: '',
      code: newCode,
      days: Array(31).fill(''),
      earnings: {},
      expenses: {}
    }]);
  };

  // Delete employee
  const deleteEmployee = (id) => {
    if (!isAdminMode) return;
    
    setEmployees(prev => prev.filter(emp => emp.id !== id));
  };

  // Edit employee
  const editEmployee = (id, field, value) => {
    if (!isAdminMode) return;
    
    setEmployees(prev => prev.map(emp => 
      emp.id === id ? { ...emp, [field]: value } : emp
    ));
  };

  // Update earning/expense amount
  const updateAmount = (employeeId, type, key, value) => {
    if (!isAdminMode) return;
    
    setEmployees(prev => prev.map(emp => {
      if (emp.id === employeeId) {
        if (type === 'earnings') {
          return {
            ...emp,
            earnings: { ...emp.earnings, [key]: parseFloat(value) || 0 }
          };
        } else {
          return {
            ...emp,
            expenses: { ...emp.expenses, [key]: parseFloat(value) || 0 }
          };
        }
      }
      return emp;
    }));
  };

  // Filter employees based on search term
  const filteredEmployees = employees.filter(emp => 
    emp.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    emp.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    emp.code.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Calculate total earnings for an employee
  const calculateTotalEarnings = (employee) => {
    let basePay = 0;
    let bonus7Day = 0;
    let totalEarnings = 0;
    
    // Count working days (N)
    const workingDays = employee.days.filter(day => day === 'N').length;
    basePay = workingDays * 600;
    
    // Check for 7 consecutive days
    let consecutiveCount = 0;
    for (let i = 0; i < employee.days.length; i++) {
      if (employee.days[i] === 'N') {
        consecutiveCount++;
        if (consecutiveCount === 7) {
          bonus7Day += 600; // Bonus for each 7-day streak
          consecutiveCount = 0; // Reset counter after bonus
        }
      } else {
        consecutiveCount = 0;
      }
    }
    
    // Sum all earnings
    totalEarnings = basePay + bonus7Day + 
      (employee.earnings.holiday || 0) + 
      (employee.earnings.allowance || 0) + 
      (employee.earnings.performance || 0) + 
      (employee.earnings.transportation || 0);
    
    // Subtract expenses
    const totalExpenses = 
      (employee.expenses.socialSecurity || 0) + 
      (employee.expenses.lifeInsurance || 0) + 
      (employee.expenses.advance || 0) + 
      (employee.expenses.equipment || 0);
    
    return {
      basePay,
      bonus7Day,
      totalEarnings,
      totalExpenses,
      netPay: totalEarnings - totalExpenses
    };
  };

  // Month names
  const monthNames = [
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];

  // Year range
  const yearRange = Array.from({ length: 10 }, (_, i) => currentYear - 5 + i);

  // Show summary popup
  const showEmployeeSummary = (employee) => {
    setSelectedEmployee(employee);
    setShowSummary(true);
  };

  // Close summary popup
  const closeSummary = () => {
    setShowSummary(false);
    setSelectedEmployee(null);
  };

  // Render attendance cell
  const renderAttendanceCell = (employee, dayIndex) => {
    const status = employee.days[dayIndex];
    let bgColor = 'bg-gray-200';
    let textColor = 'text-gray-800';
    let label = '';

    if (status === 'N') {
      bgColor = 'bg-green-500';
      textColor = 'text-white';
      label = 'N';
    } else if (status === 'F') {
      bgColor = 'bg-red-500';
      textColor = 'text-white';
      label = 'F';
    }

    return (
      <button
        onClick={() => toggleAttendance(employee.id, dayIndex)}
        className={`w-full h-10 rounded text-sm font-bold ${bgColor} ${textColor} transition-colors duration-200`}
        disabled={!isAdminMode}
      >
        {label}
      </button>
    );
  };

  // Render the main app
  if (isAdminMode) {
    return (
      <div className="min-h-screen bg-gray-900 text-white p-2">
        {/* Header */}
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-xl font-bold">‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ G4S ‡∏ú‡∏•‡∏±‡∏î B</h1>
          <button
            onClick={() => setIsAdminMode(false)}
            className="bg-red-600 hover:bg-red-700 px-4 py-2 rounded-lg text-sm font-medium transition-colors"
          >
            ‡∏≠‡∏≠‡∏Å Admin
          </button>
        </div>

        {/* Add Employee Button */}
        <button
          onClick={addEmployee}
          className="bg-blue-600 hover:bg-blue-700 w-full py-3 rounded-lg text-lg font-bold transition-colors"
        >
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        </button>

        {/* Employees List */}
        <div className="space-y-4">
          {filteredEmployees.map((employee) => (
            <div key={employee.id} className="bg-gray-800 rounded-lg p-4 border border-gray-700">
              <div className="flex justify-between items-start mb-3">
                <div>
                  <h3 className="font-bold text-lg">{employee.firstName} {employee.lastName}</h3>
                  <p className="text-gray-300">‡∏£‡∏´‡∏±‡∏™: {employee.code}</p>
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => editEmployee(employee.id, 'firstName', prompt('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠:', employee.firstName) || employee.firstName)}
                    className="bg-yellow-600 hover:bg-yellow-700 p-2 rounded-lg text-sm transition-colors"
                    title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                  >
                    ‚úèÔ∏è
                  </button>
                  <button
                    onClick={() => deleteEmployee(employee.id)}
                    className="bg-red-600 hover:bg-red-700 p-2 rounded-lg text-sm transition-colors"
                    title="‡∏•‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>

              {/* Editable fields */}
              <div className="grid grid-cols-2 gap-2 mb-4">
                <div>
                  <label className="block text-xs text-gray-300 mb-1">‡∏ä‡∏∑‡πà‡∏≠:</label>
                  <input
                    type="text"
                    value={employee.firstName}
                    onChange={(e) => editEmployee(employee.id, 'firstName', e.target.value)}
                    className="w-full p-2 bg-gray-700 text-white rounded border border-gray-600"
                  />
                </div>
                <div>
                  <label className="block text-xs text-gray-300 mb-1">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</label>
                  <input
                    type="text"
                    value={employee.lastName}
                    onChange={(e) => editEmployee(employee.id, 'lastName', e.target.value)}
                    className="w-full p-2 bg-gray-700 text-white rounded border border-gray-600"
                  />
                </div>
              </div>

              {/* Earnings Section */}
              <div className="mb-4">
                <h4 className="font-bold text-green-400 mb-2">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</h4>
                <div className="grid grid-cols-2 gap-2 mb-2">
                  <div className="flex items-center">
                    <span className="text-sm flex-1">‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå</span>
                    <input
                      type="number"
                      value={employee.earnings.holiday || ''}
                      onChange={(e) => updateAmount(employee.id, 'earnings', 'holiday', e.target.value)}
                      className="w-20 p-1 bg-gray-700 text-white rounded border border-gray-600 text-right"
                      placeholder="0"
                    />
                  </div>
                  <div className="flex items-center">
                    <span className="text-sm flex-1">‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</span>
                    <input
                      type="number"
                      value={employee.earnings.allowance || ''}
                      onChange={(e) => updateAmount(employee.id, 'earnings', 'allowance', e.target.value)}
                      className="w-20 p-1 bg-gray-700 text-white rounded border border-gray-600 text-right"
                      placeholder="0"
                    />
                  </div>
                  <div className="flex items-center">
                    <span className="text-sm flex-1">‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ç‡∏¢‡∏±‡∏ô</span>
                    <input
                      type="number"
                      value={employee.earnings.performance || ''}
                      onChange={(e) => updateAmount(employee.id, 'earnings', 'performance', e.target.value)}
                      className="w-20 p-1 bg-gray-700 text-white rounded border border-gray-600 text-right"
                      placeholder="0"
                    />
                  </div>
                  <div className="flex items-center">
                    <span className="text-sm flex-1">‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏≤‡∏à‡∏£</span>
                    <input
                      type="number"
                      value={employee.earnings.transportation || ''}
                      onChange={(e) => updateAmount(employee.id, 'earnings', 'transportation', e.target.value)}
                      className="w-20 p-1 bg-gray-700 text-white rounded border border-gray-600 text-right"
                      placeholder="0"
                    />
                  </div>
                </div>
              </div>

              {/* Expenses Section */}
              <div className="mb-4">
                <h4 className="font-bold text-red-400 mb-2">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</h4>
                <div className="grid grid-cols-2 gap-2 mb-2">
                  <div className="flex items-center">
                    <span className="text-sm flex-1">‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°</span>
                    <input
                      type="number"
                      value={employee.expenses.socialSecurity || ''}
                      onChange={(e) => updateAmount(employee.id, 'expenses', 'socialSecurity', e.target.value)}
                      className="w-20 p-1 bg-gray-700 text-white rounded border border-gray-600 text-right"
                      placeholder="0"
                    />
                  </div>
                  <div className="flex items-center">
                    <span className="text-sm flex-1">‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï</span>
                    <input
                      type="number"
                      value={employee.expenses.lifeInsurance || ''}
                      onChange={(e) => updateAmount(employee.id, 'expenses', 'lifeInsurance', e.target.value)}
                      className="w-20 p-1 bg-gray-700 text-white rounded border border-gray-600 text-right"
                      placeholder="0"
                    />
                  </div>
                  <div className="flex items-center">
                    <span className="text-sm flex-1">‡πÄ‡∏ö‡∏¥‡∏Å‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤</span>
                    <input
                      type="number"
                      value={employee.expenses.advance || ''}
                      onChange={(e) => updateAmount(employee.id, 'expenses', 'advance', e.target.value)}
                      className="w-20 p-1 bg-gray-700 text-white rounded border border-gray-600 text-right"
                      placeholder="0"
                    />
                  </div>
                  <div className="flex items-center">
                    <span className="text-sm flex-1">‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå</span>
                    <input
                      type="number"
                      value={employee.expenses.equipment || ''}
                      onChange={(e) => updateAmount(employee.id, 'expenses', 'equipment', e.target.value)}
                      className="w-20 p-1 bg-gray-700 text-white rounded border border-gray-600 text-right"
                      placeholder="0"
                    />
                  </div>
                </div>
              </div>

              {/* Attendance Grid */}
              <div className="grid grid-cols-7 gap-1 mb-4">
                {dateRange.map((date, index) => (
                  <div key={index} className="text-center">
                    <div className="text-xs text-gray-400 mb-1">{date}</div>
                    {renderAttendanceCell(employee, index)}
                  </div>
                ))}
              </div>

              {/* Summary Button */}
              <button
                onClick={() => showEmployeeSummary(employee)}
                className="bg-purple-600 hover:bg-purple-700 w-full py-2 rounded-lg text-sm font-medium transition-colors"
              >
                ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
              </button>
            </div>
          ))}
        </div>

        {filteredEmployees.length === 0 && (
          <div className="text-center py-8 text-gray-400">
            ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
          </div>
        )}
      </div>
    );
  }

  // Login screen for admin
  if (!isAdminMode && password === '') {
    return (
      <div className="min-h-screen bg-gray-900 text-white flex flex-col items-center justify-center p-4">
        <div className="bg-gray-800 rounded-lg p-6 w-full max-w-md">
          <h1 className="text-2xl font-bold text-center mb-6">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Admin</h1>
          <div className="mb-4">
            <label className="block text-sm mb-2">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full p-3 bg-gray-700 text-white rounded border border-gray-600"
              placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              autoFocus
            />
          </div>
          <button
            onClick={handleAdminLogin}
            className="bg-blue-600 hover:bg-blue-700 w-full py-3 rounded-lg text-lg font-bold transition-colors"
          >
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
          </button>
        </div>
      </div>
    );
  }

  // Frontend mode (normal view)
  return (
    <div className="min-h-screen bg-gray-900 text-white p-2">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 space-y-2 sm:space-y-0">
        <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4">
          <select
            value={currentMonth}
            onChange={(e) => setCurrentMonth(parseInt(e.target.value))}
            className="bg-gray-800 text-white p-2 rounded border border-gray-600"
          >
            {monthNames.map((month, index) => (
              <option key={index} value={index}>{month}</option>
            ))}
          </select>
          
          <select
            value={currentYear}
            onChange={(e) => setCurrentYear(parseInt(e.target.value))}
            className="bg-gray-800 text-white p-2 rounded border border-gray-600"
          >
            {yearRange.map((year) => (
              <option key={year} value={year}>{year}</option>
            ))}
          </select>
        </div>
        
        <div className="flex items-center space-x-2 w-full sm:w-auto">
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏´‡∏±‡∏™..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="flex-1 bg-gray-800 text-white p-2 rounded border border-gray-600"
          />
          <button
            onClick={() => setIsAdminMode(true)}
            className="bg-yellow-600 hover:bg-yellow-700 px-4 py-2 rounded-lg text-sm font-medium transition-colors"
          >
            Admin
          </button>
        </div>
      </div>

      {/* Date Range Header */}
      <div className="bg-gray-800 rounded-lg p-3 mb-4">
        <div className="flex justify-between text-sm">
          <span>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {dateRange[0]} {monthNames[currentMonth]} {currentYear} - {dateRange[dateRange.length - 1]} {monthNames[(currentMonth + 1) % 12]} {currentMonth === 11 ? currentYear + 1 : currentYear}</span>
          <span>{dateRange.length} ‡∏ß‡∏±‡∏ô</span>
        </div>
      </div>

      {/* Employees List */}
      <div className="space-y-4">
        {filteredEmployees.map((employee) => {
          const totals = calculateTotalEarnings(employee);
          
          return (
            <div key={employee.id} className="bg-gray-800 rounded-lg p-4 border border-gray-700">
              <div className="flex justify-between items-start mb-3">
                <div>
                  <h3 className="font-bold text-lg">{employee.firstName} {employee.lastName}</h3>
                  <p className="text-gray-300">‡∏£‡∏´‡∏±‡∏™: {employee.code}</p>
                </div>
                <button
                  onClick={() => showEmployeeSummary(employee)}
                  className="bg-purple-600 hover:bg-purple-700 px-3 py-1 rounded text-sm font-medium transition-colors"
                >
                  ‡∏™‡∏£‡∏∏‡∏õ
                </button>
              </div>

              {/* Attendance Grid */}
              <div className="grid grid-cols-7 gap-1 mb-4">
                {dateRange.map((date, index) => (
                  <div key={index} className="text-center">
                    <div className="text-xs text-gray-400 mb-1">{date}</div>
                    {renderAttendanceCell(employee, index)}
                  </div>
                ))}
              </div>

              {/* Earnings Summary */}
              <div className="mt-4 p-3 bg-gray-700 rounded-lg">
                <div className="flex justify-between text-sm">
                  <span>‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ({totals.basePay / 600} ‡∏ß‡∏±‡∏ô):</span>
                  <span className="font-bold text-green-400">{totals.basePay.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                </div>
                {totals.bonus7Day > 0 && (
                  <div className="flex justify-between text-sm mt-1">
                    <span>‡πÇ‡∏ö‡∏ô‡∏±‡∏™ 7DAY:</span>
                    <span className="font-bold text-green-400">{totals.bonus7Day.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                  </div>
                )}
                {Object.keys(employee.earnings).filter(key => employee.earnings[key] > 0).map(key => (
                  <div key={key} className="flex justify-between text-sm mt-1">
                    <span>{key === 'holiday' ? '‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå' : 
                          key === 'allowance' ? '‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á' :
                          key === 'performance' ? '‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ç‡∏¢‡∏±‡∏ô' :
                          '‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏≤‡∏à‡∏£'}:</span>
                    <span className="font-bold text-green-400">{employee.earnings[key].toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                  </div>
                ))}
                {Object.keys(employee.expenses).filter(key => employee.expenses[key] > 0).map(key => (
                  <div key={key} className="flex justify-between text-sm mt-1">
                    <span>{key === 'socialSecurity' ? '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°' : 
                          key === 'lifeInsurance' ? '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï' :
                          key === 'advance' ? '‡πÄ‡∏ö‡∏¥‡∏Å‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤' :
                          '‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå'}:</span>
                    <span className="font-bold text-red-400">-{employee.expenses[key].toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                  </div>
                ))}
                <div className="border-t border-gray-600 mt-2 pt-2 flex justify-between font-bold">
                  <span>‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏ó‡∏ò‡∏¥:</span>
                  <span className="text-blue-400">{totals.netPay.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {filteredEmployees.length === 0 && (
        <div className="text-center py-8 text-gray-400">
          ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        </div>
      )}

      {/* Summary Popup */}
      {showSummary && selectedEmployee && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-gray-800 rounded-lg p-6 w-full max-w-md max-h-96 overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold">‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ</h2>
              <button
                onClick={closeSummary}
                className="text-gray-400 hover:text-white text-2xl"
              >
                √ó
              </button>
            </div>
            
            <div className="space-y-3">
              <div className="flex justify-between">
                <span>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</span>
                <span className="font-bold">{selectedEmployee.firstName} {selectedEmployee.lastName}</span>
              </div>
              
              <div className="flex justify-between">
                <span>‡∏£‡∏´‡∏±‡∏™:</span>
                <span className="font-bold">{selectedEmployee.code}</span>
              </div>
              
              <div className="border-t border-gray-600 pt-3">
                <div className="flex justify-between">
                  <span>‡∏Ñ‡πà‡∏≤‡πÅ‡∏£‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ({calculateTotalEarnings(selectedEmployee).basePay / 600} ‡∏ß‡∏±‡∏ô):</span>
                  <span className="text-green-400 font-bold">{calculateTotalEarnings(selectedEmployee).basePay.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                </div>
                
                {calculateTotalEarnings(selectedEmployee).bonus7Day > 0 && (
                  <div className="flex justify-between">
                    <span>‡πÇ‡∏ö‡∏ô‡∏±‡∏™ 7DAY:</span>
                    <span className="text-green-400 font-bold">{calculateTotalEarnings(selectedEmployee).bonus7Day.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                  </div>
                )}
                
                {Object.keys(selectedEmployee.earnings).filter(key => selectedEmployee.earnings[key] > 0).map(key => (
                  <div key={key} className="flex justify-between">
                    <span>{key === 'holiday' ? '‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå' : 
                          key === 'allowance' ? '‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á' :
                          key === 'performance' ? '‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ç‡∏¢‡∏±‡∏ô' :
                          '‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏≤‡∏à‡∏£'}:</span>
                    <span className="text-green-400 font-bold">{selectedEmployee.earnings[key].toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                  </div>
                ))}
                
                {Object.keys(selectedEmployee.expenses).filter(key => selectedEmployee.expenses[key] > 0).map(key => (
                  <div key={key} className="flex justify-between">
                    <span>{key === 'socialSecurity' ? '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏±‡∏á‡∏Ñ‡∏°' : 
                          key === 'lifeInsurance' ? '‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï' :
                          key === 'advance' ? '‡πÄ‡∏ö‡∏¥‡∏Å‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤' :
                          '‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå'}:</span>
                    <span className="text-red-400 font-bold">-{selectedEmployee.expenses[key].toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                  </div>
                ))}
                
                <div className="border-t border-gray-600 mt-3 pt-3 flex justify-between font-bold">
                  <span>‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥:</span>
                  <span className="text-blue-400">{calculateTotalEarnings(selectedEmployee).netPay.toLocaleString()} ‡∏ö‡∏≤‡∏ó</span>
                </div>
              </div>
            </div>
            
            <button
              onClick={closeSummary}
              className="bg-blue-600 hover:bg-blue-700 w-full py-2 rounded-lg mt-4 font-medium transition-colors"
            >
              ‡∏õ‡∏¥‡∏î
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default App;
